knitr::opts_chunk$set(echo = TRUE)
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
# Define the SIR model function
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I # Rate of change of the Susceptible class
dI <- beta * S * I - gamma * I # Rate of change of the Infected class
dR <- gamma * I # Rate of change of the Recovered class
# Return the rate of change for each class
list(c(dS, dI, dR))
})
}
# Initial conditions
initial_state <- c(S = 0.99, # 99% susceptible
I = 0.01, # 1% infected
R = 0.00) # 0% recovered
# Parameters
gamma <- 0.1 # Recovery rate
# Time frame
times <- seq(0, 160, by = 1) # Simulate for 160 days
# Generate 100 values for beta from 0 to 1
beta_values <- seq(0, 1, length.out = 100)
# Create a data frame to store simulation results
simulation_results <- data.frame()
# Loop over each beta value and solve the SIR model
for (beta in beta_values) {
parameters <- c(beta = beta, gamma = gamma)
# Solve the SIR model
out <- ode(y = initial_state, times = times, func = sir_model, parms = parameters)
# Convert to a data frame
out_df <- as.data.frame(out)
# Add beta to the data frame
out_df$beta <- beta
# Combine with the results
simulation_results <- rbind(simulation_results, out_df)
}
# Plotting the results using ggplot2
p <- ggplot(simulation_results, aes(x = time)) +
geom_line(aes(y = S, color = "Susceptible")) +
geom_line(aes(y = I, color = "Infected")) +
geom_line(aes(y = R, color = "Recovered")) +
labs(title = 'SIR Model Simulation', x = 'Time (days)', y = 'Proportion') +
scale_color_manual(values = c("blue", "red", "green")) +
transition_manual(beta) +
labs(subtitle = 'Beta: {current_frame}')
# Create the animation
animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600)
# Save the animation
anim_save("sir_model_simulation.gif")
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
# Define the SIR model function
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I # Rate of change of the Susceptible class
dI <- beta * S * I - gamma * I # Rate of change of the Infected class
dR <- gamma * I # Rate of change of the Recovered class
# Return the rate of change for each class
list(c(dS, dI, dR))
})
}
# Initial conditions
initial_state <- c(S = 0.99, # 99% susceptible
I = 0.01, # 1% infected
R = 0.00) # 0% recovered
# Parameters
gamma <- 0.1 # Recovery rate
# Time frame
times <- seq(0, 160, by = 1) # Simulate for 160 days
# Generate 100 values for beta from 0 to 1
beta_values <- seq(0, 1, length.out = 100)
# Create a data frame to store simulation results
simulation_results <- data.frame()
# Loop over each beta value and solve the SIR model
for (beta in beta_values) {
parameters <- c(beta = beta, gamma = gamma)
# Solve the SIR model
out <- ode(y = initial_state, times = times, func = sir_model, parms = parameters)
# Convert to a data frame
out_df <- as.data.frame(out)
# Add beta to the data frame
out_df$beta <- beta
# Combine with the results
simulation_results <- rbind(simulation_results, out_df)
}
# Plotting the results using ggplot2
p <- ggplot(simulation_results, aes(x = time)) +
geom_line(aes(y = S, color = "Susceptible")) +
geom_line(aes(y = I, color = "Infected")) +
geom_line(aes(y = R, color = "Recovered")) +
labs(title = 'SIR Model Simulation', x = 'Time (days)', y = 'Proportion') +
scale_color_manual(values = c("blue", "red", "green")) +
transition_manual(beta) +
labs(subtitle = 'Beta: {current_frame}')
# Create the animation
animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600)
# Save the animation
anim_save("sir_model_simulation.gif")
# Create the animation
animation <- animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600)
animation
# Save the animation
anim_save("sir_model_simulation.gif", animation)
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
# Define the SIR model function
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I # Rate of change of the Susceptible class
dI <- beta * S * I - gamma * I # Rate of change of the Infected class
dR <- gamma * I # Rate of change of the Recovered class
# Return the rate of change for each class
list(c(dS, dI, dR))
})
}
# Initial conditions
initial_state <- c(S = 0.99, # 99% susceptible
I = 0.01, # 1% infected
R = 0.00) # 0% recovered
# Parameters
gamma <- 0.1 # Recovery rate
# Time frame
times <- seq(0, 160, by = 1) # Simulate for 160 days
# Generate 100 values for beta from 0 to 1
beta_values <- seq(0, 1, length.out = 100)
# Create a data frame to store simulation results
simulation_results <- data.frame()
# Loop over each beta value and solve the SIR model
for (beta in beta_values) {
parameters <- c(beta = beta, gamma = gamma)
# Solve the SIR model
out <- ode(y = initial_state, times = times, func = sir_model, parms = parameters)
# Convert to a data frame
out_df <- as.data.frame(out)
# Add beta to the data frame
out_df$beta <- beta
# Combine with the results
simulation_results <- rbind(simulation_results, out_df)
}
# Plotting the results using ggplot2
p <- ggplot(simulation_results, aes(x = time)) +
geom_line(aes(y = S, color = "Susceptible")) +
geom_line(aes(y = I, color = "Infected")) +
geom_line(aes(y = R, color = "Recovered")) +
labs(title = 'SIR Model Simulation', x = 'Time (days)', y = 'Proportion') +
scale_color_manual(values = c("blue", "red", "green")) +
transition_states(beta, transition_length = 1, state_length = 1) +
labs(subtitle = 'Beta: {closest_state}')
# Create the animation
animation <- animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600, renderer = gifski_renderer())
# Save the animation
anim_save("sir_model_simulation.gif", animation)
animation
install.packages("Cairo")
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
library(Cairo)
# Define the SIR model function
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I # Rate of change of the Susceptible class
dI <- beta * S * I - gamma * I # Rate of change of the Infected class
dR <- gamma * I # Rate of change of the Recovered class
# Return the rate of change for each class
list(c(dS, dI, dR))
})
}
# Initial conditions
initial_state <- c(S = 0.99, # 99% susceptible
I = 0.01, # 1% infected
R = 0.00) # 0% recovered
# Parameters
gamma <- 0.1 # Recovery rate
# Time frame
times <- seq(0, 160, by = 1) # Simulate for 160 days
# Generate 100 values for beta from 0 to 1
beta_values <- seq(0, 1, length.out = 100)
# Create a data frame to store simulation results
simulation_results <- data.frame()
# Loop over each beta value and solve the SIR model
for (beta in beta_values) {
parameters <- c(beta = beta, gamma = gamma)
# Solve the SIR model
out <- ode(y = initial_state, times = times, func = sir_model, parms = parameters)
# Convert to a data frame
out_df <- as.data.frame(out)
# Add beta to the data frame
out_df$beta <- beta
# Combine with the results
simulation_results <- rbind(simulation_results, out_df)
}
# Plotting the results using ggplot2
p <- ggplot(simulation_results, aes(x = time)) +
geom_line(aes(y = S, color = "Susceptible")) +
geom_line(aes(y = I, color = "Infected")) +
geom_line(aes(y = R, color = "Recovered")) +
labs(title = 'SIR Model Simulation', x = 'Time (days)', y = 'Proportion') +
scale_color_manual(values = c("blue", "red", "green")) +
transition_states(beta, transition_length = 1, state_length = 1) +
labs(subtitle = 'Beta: {closest_state}')
# Create the animation
animation <- animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600, renderer = gifski_renderer())
# Save the animation
anim_save("sir_model_simulation.gif", animation)
animation
# Load required packages
library(deSolve)
library(ggplot2)
library(gganimate)
library(Cairo)
# Define the SIR model function
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I # Rate of change of the Susceptible class
dI <- beta * S * I - gamma * I # Rate of change of the Infected class
dR <- gamma * I # Rate of change of the Recovered class
# Return the rate of change for each class
list(c(dS, dI, dR))
})
}
# Initial conditions
initial_state <- c(S = 0.99, # 99% susceptible
I = 0.01, # 1% infected
R = 0.00) # 0% recovered
# Parameters
gamma <- 0.1 # Recovery rate
# Time frame
times <- seq(0, 160, by = 1) # Simulate for 160 days
# Generate 100 values for beta from 0 to 1
beta_values <- seq(0, 1, length.out = 100)
# Create a data frame to store simulation results
simulation_results <- data.frame()
# Loop over each beta value and solve the SIR model
for (beta in beta_values) {
parameters <- c(beta = beta, gamma = gamma)
# Solve the SIR model
out <- ode(y = initial_state, times = times, func = sir_model, parms = parameters)
# Convert to a data frame
out_df <- as.data.frame(out)
# Add beta to the data frame
out_df$beta <- beta
# Combine with the results
simulation_results <- rbind(simulation_results, out_df)
}
# Plotting the results using ggplot2
p <- ggplot(simulation_results, aes(x = time)) +
geom_line(aes(y = S, color = "Susceptible")) +
geom_line(aes(y = I, color = "Infected")) +
geom_line(aes(y = R, color = "Recovered")) +
labs(title = 'SIR Model Simulation', x = 'Time (days)', y = 'Proportion') +
scale_color_manual(values = c("blue", "red", "green")) +
transition_states(beta, transition_length = 1, state_length = 1) +
labs(subtitle = 'Beta: {closest_state}')
# Create the animation
#animation <- animate(p, nframes = length(beta_values), fps = 10, width = 800, height = 600, renderer = gifski_renderer())
# Save the animation
#anim_save("sir_model_simulation.gif", animation)
#animation
